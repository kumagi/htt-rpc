require './ast_node'

grammar Kantera
  include Util
  rule all
    (comment {
       def build(s); end
     }
     / setting {
       def build(doc)
         doc.settings.merge!(parse)
       end
     } / package {
       def build(doc)
         doc.package = parse
       end
     } / option {
       def build(doc)
         doc.options.merge!(parse)
       end
     } / message {
       def build(doc)
         doc.messages << parse
       end
     } / service {
       def build(doc)
         doc.services << parse
       end
     } / "\n" {
       def build(s); end
     }
     )+ {
         def build(doc)
           elements.each{|n|
             n.build(doc)
           }
         end
       }
  end

  rule setting
    setting_name:identifier space '=' space setting_value:string space? ';' {
      def key; setting_name.text_value; end
      def value; setting_value.text_value; end
      def parse; {key => value}; end
    }
  end

  rule package
    'package' space pname:identifier space? ';' {
      def name; pname.text_value; end
      def parse; name; end
    }
  end

  rule option
    'option' space identifier space? '=' space? string space? ';' {
      def key; elements[2].text_value; end
      def value; elements[6].text_value; end
      def parse; {key => value}; end
      true
    }
  end

  rule message
    'message' space identifier space? '{' (space? message_def)* space? '}' {
      def name; elements[2].text_value; end
      def parse
        mes = Message.new
        mes.name = name
        elements[5].elements.each{|e|
          child = e.elements[1]
          begin
            mes.add_element(child.parse)
          rescue
          end
        }

        mes
      end
    }
  end

  rule message_def
    member / enum / message
  end

  rule member
    member_atribute?
    ty:identifier space na:identifier space '=' space num:number space? ';' {
      def name; na.text_value; end
      def type; ty.text_value; end
      def node_id; num.text_value.to_i; end
      def attr;
        return elements[0].attr unless elements[0].text_value.empty?
        nil
      end
      def parse
        Node.new(name, type, node_id, attr)
      end
    }
  end

  rule member_atribute
    ('optional' / 'required' / 'repeated') space {
      def attr; elements[0].text_value; end
    }
  end

  rule enum
    'enum' space ident:identifier space '{' space
       enums:(name:identifier space '=' space num:number space? ';' space)*
    '}' {
      def name; ident.text_value; end
      def parse
        nodes = enums.elements.map{|e|
          name = e.name.text_value
          num = e.num.text_value.to_i
          EnumNode.new(name, num)
        }
        Enum.new(name, nodes)
      end
    }
  end

  rule service
    'service' space n:identifier space? '{' services:(space? defs:method_def)* space? '}' {
      def name; n.text_value; end
      def parse
        s = Service.new
        s.name = name
        methods = services.elements.map{|e|
          s.procedures << e.defs.parse
        }
        s
      end
    }
  end

  rule method_def
    in_stream:(txt:'stream' space)? v:verb space pos:path args:argument_list space?
     '->' space? out_stream:(txt:'stream' space)? ret:identifier space? ';' {
      def name
        method = v.text_value.downcase
        path = pos.text_value.downcase.gsub(/\//, "_")
        method + path
      end
      def arguments;
        args.parse; end
      def returns; ret.text_value; end
      def input_stream
        return nil if in_stream.text_value == ""
        in_stream.txt.text_value == "stream"
      end
      def output_stream
        return nil if in_stream.text_value == ""
        out_stream.txt.text_value == 'stream'
      end
      def raw_path
        pos.text_value
      end
      def parse
        Procedure.new(name, arguments, returns, raw_path, input_stream, output_stream)
      end
    }
  end

  rule verb
    'GET' / 'POST' / 'PUT' / 'PATCH' / 'DELETE'
  end

  rule argument_list
    '(' car:argument cdr:(',' args:argument)* ')' {
      def parse
        first = car.parse
        rest = cdr.elements.map{|m|
          m.args.parse
        }
        [first] + rest
      end
    }
  end

  rule argument
    space? ftype:identifier space fname:identifier space? {
      def parse
        ret = Argument.new
        ret.type = ftype.text_value
        ret.name = fname.text_value
        ret
      end
    }
  end
end
