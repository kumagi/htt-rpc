# -*- coding: utf-8 -*-
# DO NOT EDIT!
# this source code is automatically generated from <%= file %>

require 'celluloid/autostart'
require 'reel'
require 'pp'
require './<%= filename %>_server_impl'  # user implements
require 'json'
require 'msgpack'

class <%= filename.to_camel %>Server < Reel::Server::HTTP
  def initialize(host = "127.0.0.1", port = 3000)
    super(host, port, &method(:on_connection))

    @services = {}
    <%- ast.services.each do |service| -%>
    @services["<%= service.name.to_snake %>"] = <%= ast.package.to_camel %>::<%= service.name%>.new
    <%- end -%>

    @static_methods = {}
    @static_argument_parser = {}
    <%- ast.services.each do |service| -%>
    <%- service.procedures.each do |method| -%>
    <%- next if method.raw_path =~ /{.*?}/ -%>
    @static_methods["/<%= service.name.to_snake %><%= method.raw_path -%>"] = @services["<%= service.name.to_snake %>"].method(:<%= method.make_method %>)
    @static_argument_parser["/<%= service.name.to_snake %><%= method.raw_path -%>"] = self.method(:parse_for_<%= service.name.to_snake %>_<%= method.make_method%>)
    <%- end -%>
    <%- end -%>

  end

  def on_connection(connection)
    connection.each_request do |request|
      if request.websocket?
        handle_websocket(request.websocket)
      else
        handle_request(request)
      end
    end
  end

  def handle_request(request)
    buff = request.body.read(10000)

    data = nil
    case request.headers["Content-type"]
    when "application/json"
      begin
        data = JSON.parse(buff)
      rescue TypeError => e
        request.respond :bad_request, e.message
      rescue JSON::ParserError
        request.respond :bad_request, "invalid json '#{buff}'"
      end
    when "application/msgpack"
      begin
        data = MessagePack.unpack(buff)
      rescue MessagePack::MalformedFormatError
        request.respond :bad_request, "invalid msgpack '#{buff}'"
      end
    end

    begin
      result = dispatch(request.url, data)
      request.respond :ok, result.to_json
    rescue ArgumentError => e
      p e
      pp e.backtrace
      request.respond :bad_request, "invalid request"
    rescue NoMethodError => e
      p e
      pp e.backtrace
      request.respond :not_found, "method '#{request.url}' does not exist"
    rescue => e
      p e
      pp e.backtrace
      request.respond :ok, e.to_str
    end
  end

  def handle_websocket(sock)
    sock << "Hello everyone out there in WebSocket land!"
    sock.close
  end

  def dispatch(path, data)
    # static route
    if @static_methods.include?(path)
      args = @static_argument_parser[path].call(data)
      return @static_methods[path].call(*args)
    end

    <%- ast.services.each do |service| -%>
    <%- if service.procedures.any?{|m| /{.*?}/ =~ m.raw_path }-%>

    # dynamic route
    <%- service.procedures.each do |method| -%>
    <%- next unless method.raw_path =~ /{.*?}/ -%>
    if ret = path.scan(/<%= method.raw_path.gsub("/", "\\/").gsub(/{[^}]+?}/, "([^\\/]+)") %>/)
      puts "calling <%= method.make_method %>"
      args = parse_for_<%= service.name.to_snake %>_<%= method.make_method %>(data)
      return @services["<%= service.name.to_snake %>"].<%= method.make_method %>(*ret, *args)
    end
    <%- end -%>
    <%- end -%>
    <%- end -%>

    # failed to route
    raise ("method for #{path} not found")
  end

  <%- ast.services.each do |service| -%>
  <%- service.procedures.each do |method| -%>
  def parse_for_<%= service.name.to_snake %>_<%= method.make_method %>(data)
    ret = []
    if data.class == Array
      return ret
    <%- unless method.arguments.empty? -%>
    elsif data.class == Hash
      <%- method.arguments.each_with_index do |argument, i| -%>
      ret[<%= i %>] = data["<%= argument.name %>"]
      <%- end -%>
    <%- end -%>
    else
      raise "Invalid argument #{data.class}: #{data}"
    end
    ret
  end
  <%- end -%>
  <%- end -%>
end

<%= filename.to_camel %>Server.run
